<?php
/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <http://www.doctrine-project.org>.
 */

namespace Doctrine\ORM\Persisters\Generator;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 * @since   2.4
 */
abstract class PersisterGenerator
{

    protected $namespace;

    /**
     * Metadata object that describes the mapping of the mapped entity class.
     *
     * @var \Doctrine\ORM\Mapping\ClassMetadata
     */
    protected $class;

    /**
     * The EntityManager instance.
     *
     * @var \Doctrine\ORM\EntityManager
     */
    protected $em;

    public function __construct(EntityManager $em, ClassMetadata $class, $namespace)
    {
        $this->em        = $em;
        $this->class     = $class;
        $this->namespace = $namespace;
    }

    /**
     * @var string
     */
    private static $classTemplate =
'<?php

namespace <namespace>;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class <className>
{
<classBody>
}
';

    /**
     * @var string
     */
    protected static $methodTemplate ='
    /**
    * {@inheritdoc}
    */
    public function <methodName>()
    {
        <body>
    }';

    /**
     * @var string
     */
    protected static $constructorTemplate = '
    /**
    * {@inheritdoc}
    */
    public function __construct($em, $class)
    {
        parent::__construct($em, $class);

        <body>
    }';

    private function generateClassBody()
    {
        $constructor    = $this->generateConstructor();
        $methods        = $this->generateMethods();


        if ($constructor !== null) {
            $code[] = str_replace(
                '<body>',
                $constructor,
                self::$constructorTemplate
            );
        }

        foreach ($methods as $name => $method) {
             $code[] = str_replace(
                array('<body>', '<methodName>'),
                array($method, $name),
                self::$methodTemplate
            );
        }

        return implode(PHP_EOL, $code);
    }

    abstract protected function generateConstructor();
    abstract protected function generateClassName();
    abstract protected function generateMethods();


    /**
     * @return string
     */
    public function generate()
    {
        $placeHolders = array(
            '<namespace>',
            '<className>',
            '<classBody>',
        );

        $replacements = array(
            $this->namespace,
            $this->generateClassName(),
            $this->generateClassBody(),
        );

        return str_replace($placeHolders, $replacements, self::$classTemplate);
    }
}